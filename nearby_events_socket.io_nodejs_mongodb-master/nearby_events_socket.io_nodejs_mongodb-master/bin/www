#!/usr/bin/env node

/**
 * Module dependencies.
 */
// var sharedsession = require("express-socket.io-session");


var app = require('../app');
var debug = require('debug')('Trip-Split:server');
var http = require('http');
var fs = require('fs');
var schemas = require('../database_models');
var env = process.env.NODE_ENV || 'development';
var config = require('../config')[env];
var mongoose = require('mongoose');
// var session = require("express-session")({
//   secret: "my-secret",
//   resave: true,
//   saveUninitialized: true
// });

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var options = {server: {socketOptions: {connectTimeoutMS: 10000}}};

mongoose.connect(config.url, options, function (err) {
  if (err) throw err;
});






server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io')(server);

// io.use(sharedsession(session, {
//   autoSave:true
// }));


fs.readdirSync('./controllers').forEach(function (file) {
  if(file.substr(-3) == '.js') {
    route = require('../controllers/' + file);
    route.controller(app,io,schemas);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
